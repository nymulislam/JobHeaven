/* eslint-disable react/prop-types */
import { useEffect } from "react";
import { Link, useLocation } from "react-router-dom";

const Blog1 = ({ title }) => {
  const location = useLocation();
  useEffect(() => {
    document.title = `Job Heaven | ${title}`;
  }, [location.pathname, title]);

  return (
    <div className="max-w-screen-xl mx-auto mb-10">
      <main className="mt-10">
        <div className="mb-4 md:mb-0 w-full max-w-screen-md mx-auto relative">
          <div
            className="absolute left-0 bottom-0 w-full h-full z-10"
            style={{
              backgroundImage:
                "linear-gradient(180deg, transparent, rgba(0, 0, 0, 0.7))",
            }}
          ></div>
          <img
            src="https://i.postimg.cc/MKG79c6C/medical-Report.png"
            className="left-0 top-0 w-full z-0 object-cover"
          />
          <div className="p-4 absolute bottom-0 left-0 z-20">
            <Link
              to="/"
              className="px-4 py-1 bg-black text-gray-200 inline-flex items-center justify-center mb-2"
            >
              Health Consultancy
            </Link>
            <h2 className="text-4xl font-semibold text-gray-100 leading-tight">
            Holistic Health: A Guide to Wellness and Vitality
            </h2>
            <div className="flex mt-3">
              <img
                src="https://randomuser.me/api/portraits/men/97.jpg"
                className="h-10 w-10 rounded-full mr-2 object-cover"
              />
              <div>
                <p className="font-semibold text-gray-200 text-sm">
                  {" "}
                  Naymul Islam{" "}
                </p>
                <p className="font-semibold text-gray-400 text-xs"> 30 Nov </p>
              </div>
            </div>
          </div>
        </div>

        <div className="px-4 lg:px-0 mt-12 text-gray-700 max-w-screen-md mx-auto text-lg leading-relaxed">
          <h2 className="text-2xl text-gray-800 font-semibold mb-4 mt-4">
            Demystifying Access Tokens and Refresh Tokens: A Beginner&apos;s
            Guide
          </h2>
          <p className="pb-6">
            In the world of web development, access tokens and refresh tokens
            are fundamental concepts. These tokens play a crucial role in
            ensuring the security and functionality of modern web applications.
            In this article, we will demystify access tokens and refresh tokens,
            breaking them down into simple terms that even beginners can
            understand.
          </p>
          <h2 className="text-2xl text-gray-800 font-semibold mb-4 mt-4">
            Access Tokens - The Keys to the Castle
          </h2>
          <p className="pb-6">
            Access tokens act as the keys to a castle, granting users limited
            access to specific resources or features within a web application.
            Just like keys that open doors, access tokens allow users to access
            certain parts of a web application without revealing their entire
            identity. Think of them as digital passes that allow you to enter a
            nightclub, but only access certain areas.
          </p>
          <h2 className="text-2xl text-gray-800 font-semibold mb-4 mt-4">
            How They Work - A Sneak Peek
          </h2>
          <p className="pb-6">
            Access tokens are generated by the server after a user successfully
            logs in. These tokens are time-limited and tied to the user&apos;s
            identity. When a user tries to access a protected resource, they
            present their access token. The server checks the token&apos;s
            validity and grants access if everything checks out.
          </p>

          <div className="border-l-4 border-gray-500 pl-4 mb-6 italic rounded">
            In the realm of web development, understanding access tokens and
            refresh tokens is like holding the keys to a digital kingdom. Think
            of access tokens as the digital passes that grant you entry to
            specific parts of a web application, all while safeguarding your
            identity. It&apos;s essential to learn where and how to store them
            securely, and this article will guide beginners through the
            intricacies of web security.
          </div>
          <h2 className="text-2xl text-gray-800 font-semibold mb-4 mt-4">
            Storing on the Client-side - Best Practices
          </h2>
          <p className="pb-6">
            Now, where should you store these precious access tokens? Storing
            them on the client-side is convenient, but it must be done securely.
            Common practices include storing access tokens in HTTP cookies or
            local storage. However, security is paramount. Cookies are generally
            the safer option, as they are less vulnerable to cross-site
            scripting (XSS) attacks.
          </p>
        </div>
      </main>
    </div>
  );
};

export default Blog1;
